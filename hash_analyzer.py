from dotenv import load_dotenv

import hashlib
import requests
import os
import time
import sys

load_dotenv('API_KEYS.env')
VT_URL = "https://www.virustotal.com/vtapi/v2/file/report"


def is_valid_hash(hash_value):
    """Checks if the input hash is a valid MD5 or SHA256."""
    if len(hash_value) == 32 and all(c in "0123456789abcdef" for c in hash_value.lower()):
        return "MD5"
    elif len(hash_value) == 64 and all(c in "0123456789abcdef" for c in hash_value.lower()):
        return "SHA256"
    else:
        return None


# Test Hash input
# if __name__ == "__main__":
#     user_input = input("Enter a hash (MD5/SHA256): ").strip()
#     hash_type = is_valid_hash(user_input)
#
#     if hash_type:
#         print(f"{hash_type} hash is valid.")
#     else:
#         print("Invalid Hash!")


def query_virustotal(hash_value):
    api_key = os.getenv('VIRUSTOTAL_API_KEY')
    # Test Logging
    # print(f"API Key Loaded: {api_key}")
    # Queries VirusTotal API to check the status of the hash.
    params = {'apikey': api_key, 'resource': hash_value}
    try:
        response = requests.get(VT_URL, params=params)
        # Check if the rate limit has been reached
        if response.status_code == 429 or response.status_code == 204:
            print("Rate limit exceeded. Please wait and try again.")
            sys.exit(1)
        # Check if response was successful
        elif response.status_code == 200:
            try:
                json_response = response.json()
                # Check if the JSON response contains valid data
                if json_response:
                    return json_response
                else:
                    print(f"Error parsing the response JSON for hash: {hash_value}")
                    return None
            except ValueError:
                print(f"Error parsing the response JSON for hash: {hash_value}")
                return None
        else:
            print(f"Error querying VirusTotal: HTTP {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error querying VirusTotal: {e}")
        return None


# Test Hash input
# if __name__ == "__main__":
#     user_input = input("Enter a hash (MD5/SHA256): ").strip()
#     hash_type = is_valid_hash(user_input)
#
#     if hash_type:
#         vt_result = query_virustotal(user_input)
#         if vt_result and vt_result.get('response_code') == 1:
#             print(f"Hash found on VirusTotal: {vt_result['positives']} detections.")
#         else:
#             print("Hash not found in VirusTotal.")
#     else:
#         print("Invalid Hash!")


def check_hashes_from_file(filename):
    """Reads a list of hashes from a file and checks them in VirusTotal."""
    with open(filename, 'r') as file:
        hashes = [line.strip() for line in file]

    for hash_value in hashes:
        hash_type = is_valid_hash(hash_value)
        if hash_type:
            vt_result = query_virustotal(hash_value)
            if vt_result and vt_result.get('response_code') == 1:
                print(f"{hash_value}: {vt_result['positives']} detections")
            else:
                print(f"{hash_value}: Not found in VirusTotal")
        else:
            print(f"{hash_type}: Invalid Hash Format!")


# Test batch hash lookup
if __name__ == "__main__":
    check_hashes_from_file('hashes.txt')
